name: Pull Request to Staging and main branches

# Run on call from other workflow
#on:
  workflow_call:
    inputs:
      #ENVIRONMENT_NAME:
       #description: "The environment to use in running the workflow (Staging or Production"
        #required: true 
        #type: string
      TERRAFORM_VERSION:
        description: " The Terraform version to be installed on the runner"
        required: true 
        type: string
      TERRAGRUNT_VERSION:
        description: "The Terragrunt version to be installed on the runner"
        required: true 
        type: string
      TERRAFORM_WORKING_DIR:
        required: true 
        type: string
      AWS_REGION:
        required: true 
        type: string
      ORCHESTRATION_ROLE_ARN:
        required: true 
        type: string

jobs:
  plan:
    name: "Run Terragrunt Init, Validate and Plan in Staging and Production environment"
    #since the format & docs jobs *could* commit changes, wait until those complete before running this job
    environment: ${{ inputs.ENVIRONMENT_NAME }}
    needs: [format, docs_awssso, docs_modules]
    runs-on: ubuntu-20.04
    defaults:
       run:
        working-directory: ${{ inputs.TERRAFORM_WORKING_DIR }}
    steps:
      - name: 'checkout'   
        uses: actions/checkout@
        with:
          #This will checkout the branch the PR is coming from in the head repo to avoid checkoing out repo in a detached state.
          # needed to commit terraform lockfile

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1.3.2
        with:
          terraform_version: ${{ inputs.TERRAFORM_VERSION }} 
          terraform_wrapper: true

      - name: Setup Terragrunt
        uses: autero1/action-terragrunt@v1.1.0
        with:
          terragrunt_version: ${{ inputs.TERRAGRUNT_VERSION }}

      - name: configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1.6.1
        with: 
          aws-region: ${{ inputs.AWS_REGION }}
          role-to-assume: ${{ inputs.ORCHESTRATION_ROLE_ARN }}

      - name: Terragrunt Init
        id: init
        run: terragrunt run-all init -no-color --terragrunt-non-interactive

      - name: Post Init
        uses: robburger/terraform-pr-commenter@v1.5.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          EXPAND_SUMMARY_DETAILS: 'true' # Override global environment variable; expand details just for this step
        with:
          commenter_type: init
          commenter_input: ${{ format('{0}{1}', steps.init.outputs.stdout, steps.init.outputs.stderr) }}
          commenter_exitcode: ${{ steps.init.outputs.exitcode }}

      - name: Terragrunt Validate
        id: validate
        run: terragrunt run-all validate -no-color --terragrunt-non-interactive

      - name: Post Validate
        uses: robburger/terraform-pr-commenter@v1.5.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          EXPAND_SUMMARY_DETAILS: 'true' # Override global environment variable; expand details just for this step
        with:
          commenter_type: validate
          commenter_input: ${{ format('{0}{1}', steps.validate.outputs.stdout, steps.validate.outputs.stderr) }}
          commenter_exitcode: ${{ steps.validate.outputs.exitcode }}

      # This commit terraform lockfile to repository
      - name: Commit lock file
        uses: EndBug/add-and-commit@v9
        with:
          add: ${{ env.TERRAFORM_WORKING_DIR }}
          message: "fix:Persisting lock file"
          push: true

      - name: Terragrunt Apply
        id: apply
        #
        run: | # did this in 2 steps in order to strip the refreshing state... from the plan variables
          terragrunt run-all plan -no-color --terragrunt-non-interactive >/dev/null -out=tfplan
          terragrunt show tfplan